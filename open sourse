using System;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Text;

namespace StateW1nInjector
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll")]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        const uint PROCESS_ALL_ACCESS = 0x1F0FFF;
        const uint MEM_COMMIT = 0x1000;
        const uint MEM_RESERVE = 0x2000;
        const uint PAGE_READWRITE = 0x04;

        static string currentVersion = "1.3.0";
        static string githubRepo = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/";
        static string versionUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/version.txt";
        static string exeUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/StateW1n.exe";
        static string tempUpdateExe = Path.GetTempPath() + "StateW1n_new.exe";
        static string tempUpdaterScript = Path.GetTempPath() + "StateW1n_update.bat";
        static string currentExePath = Process.GetCurrentProcess().MainModule?.FileName ?? "StateW1n.exe";
        static string currentDir = Path.GetDirectoryName(currentExePath) ?? Directory.GetCurrentDirectory();

        static HttpClient httpClient = new HttpClient();

        [STAThread]
        static void Main(string[] args)
        {
            Console.Title = $"StateW1n Injector v{currentVersion}";
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.WriteLine("====================================");
            Console.WriteLine("         StateW1n Injector         ");
            Console.WriteLine($"           Version {currentVersion}           ");
            Console.WriteLine("====================================");
            Console.ResetColor();

            if (args.Length > 0 && args[0] == "--cleanup")
            {
                CleanupOldVersion();
                return;
            }

            if (args.Length > 0 && args[0] == "--updated")
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Successfully updated to latest version!");
                Console.ResetColor();
            }

            try
            {
                // Запускаем проверку обновлений в фоне без блокировки
                _ = Task.Run(() => CheckForUpdatesAsync());

                if (args.Length > 0 && args[0] == "--silent")
                {
                    SilentMode(args);
                }
                else
                {
                    InteractiveMode();
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Error: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("Press any key to exit...");
                Console.ReadKey();
            }
        }

        static async Task CheckForUpdatesAsync()
        {
            try
            {
                await Task.Delay(3000); // Даем время показать основной интерфейс
                
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("Checking for updates...");
                Console.ResetColor();
                
                httpClient.DefaultRequestHeaders.Add("User-Agent", "StateW1n-Updater/1.0");
                
                try
                {
                    // Проверяем доступность файла версии
                    var response = await httpClient.GetAsync(versionUrl, HttpCompletionOption.ResponseHeadersRead);
                    
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray;
                        Console.WriteLine("Update server not available (test build mode)");
                        Console.ResetColor();
                        return;
                    }

                    string latestVersion = await response.Content.ReadAsStringAsync();
                    latestVersion = latestVersion.Trim();

                    if (IsNewerVersion(latestVersion, currentVersion))
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.WriteLine($"New version available: {latestVersion}");
                        Console.ResetColor();
                        
                        Console.Write("Update now? (y/n): ");
                        var key = Console.ReadKey();
                        
                        if (key.KeyChar == 'y' || key.KeyChar == 'Y')
                        {
                            await PerformUpdate();
                        }
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine("You have the latest version!");
                        Console.ResetColor();
                    }
                }
                catch (HttpRequestException httpEx)
                {
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    Console.WriteLine($"Update server unavailable: {httpEx.Message}");
                    Console.WriteLine("This is normal for test builds");
                    Console.ResetColor();
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.DarkGray;
                Console.WriteLine($"Update check: Server not available (normal for testing)");
                Console.ResetColor();
            }
        }

        static async Task PerformUpdate()
        {
            try
            {
                Console.WriteLine("\nDownloading update...");
                
                // Проверяем доступность EXE файла
                var exeResponse = await httpClient.GetAsync(exeUrl, HttpCompletionOption.ResponseHeadersRead);
                if (!exeResponse.IsSuccessStatusCode)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Update file not found on server");
                    Console.ResetColor();
                    return;
                }

                using (var stream = await exeResponse.Content.ReadAsStreamAsync())
                using (var fileStream = File.Create(tempUpdateExe))
                {
                    await stream.CopyToAsync(fileStream);
                }
                
                if (!File.Exists(tempUpdateExe))
                    throw new Exception("Downloaded file not found");

                Console.WriteLine("Creating update script...");
                
                string batScript = $@"
@echo off
chcp 65001 >nul
title StateW1n Updater
echo StateW1n Injector Update
timeout /t 2 /nobreak >nul

taskkill /f /im ""{Path.GetFileName(currentExePath)}"" >nul 2>&1
timeout /t 1 /nobreak >nul

echo Updating executable...
move /y ""{tempUpdateExe}"" ""{currentExePath}"" >nul 2>&1

if exist ""{currentExePath}"" (
    echo Update successful!
    start """" ""{currentExePath}"" --updated
) else (
    echo Update failed!
    pause
)

del ""%~f0"" >nul 2>&1
";
                
                File.WriteAllText(tempUpdaterScript, batScript);
                
                Console.WriteLine("Restarting application...");
                
                Process.Start(new ProcessStartInfo
                {
                    FileName = tempUpdaterScript,
                    WindowStyle = ProcessWindowStyle.Hidden
                });
                
                Environment.Exit(0);
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Update failed: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("You can download updates manually from GitHub");
            }
        }

        static void CleanupOldVersion()
        {
            try
            {
                string oldExe = Path.Combine(currentDir, "StateW1n_old.exe");
                if (File.Exists(oldExe))
                {
                    File.Delete(oldExe);
                }
                
                if (File.Exists(tempUpdaterScript))
                {
                    File.Delete(tempUpdaterScript);
                }
            }
            catch { }
        }

        static bool IsNewerVersion(string latest, string current)
        {
            try
            {
                Version latestVer = new Version(latest);
                Version currentVer = new Version(current);
                return latestVer > currentVer;
            }
            catch
            {
                return false;
            }
        }

        static void InteractiveMode()
        {
            while (true)
            {
                Console.WriteLine("\n" + new string('=', 40));
                Console.WriteLine("           STATEW1N MENU");
                Console.WriteLine(new string('=', 40));
                Console.WriteLine("1. List Roblox processes");
                Console.WriteLine("2. Inject Lua script");
                Console.WriteLine("3. Process Explorer");
                Console.WriteLine("4. Quick inject");
                Console.WriteLine("5. Settings");
                Console.WriteLine("6. Check for updates");
                Console.WriteLine("7. Exit");
                Console.Write("\nSelect option: ");

                string? choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        ListRobloxProcesses();
                        break;
                    case "2":
                        InjectManualScript();
                        break;
                    case "3":
                        ShowProcessExplorer();
                        break;
                    case "4":
                        QuickInject();
                        break;
                    case "5":
                        ShowSettings();
                        break;
                    case "6":
                        CheckForUpdatesAsync().Wait();
                        break;
                    case "7":
                        return;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid option!");
                        Console.ResetColor();
                        break;
                }
            }
        }

        static void ListRobloxProcesses()
        {
            Console.WriteLine("\nSearching for Roblox processes...");
            bool found = false;

            foreach (Process process in Process.GetProcesses())
            {
                try
                {
                    string name = process.ProcessName.ToLower();
                    if (name.Contains("roblox") || name.Contains("windows10universal"))
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($"PID: {process.Id} | Name: {process.ProcessName}");
                        found = true;
                    }
                }
                catch { }
            }

            if (!found)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("No Roblox processes found!");
            }
            Console.ResetColor();
        }

        static void ShowProcessExplorer()
        {
            Console.WriteLine("\nAll running processes:");
            int count = 0;
            
            foreach (Process process in Process.GetProcesses())
            {
                try
                {
                    if (count < 20) // Показываем только первые 20 процессов
                    {
                        Console.WriteLine($"PID: {process.Id} | {process.ProcessName}");
                        count++;
                    }
                }
                catch { }
            }
            
            Console.WriteLine($"... and {Process.GetProcesses().Length - count} more processes");
        }

        static void InjectManualScript()
        {
            try
            {
                Console.Write("Enter target PID: ");
                string? input = Console.ReadLine();
                if (string.IsNullOrEmpty(input))
                {
                    Console.WriteLine("Invalid PID!");
                    return;
                }

                int pid = int.Parse(input);

                Console.WriteLine("Enter Lua script (end with empty line):");
                StringBuilder script = new StringBuilder();
                string? line;

                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    script.AppendLine(line);
                }

                Console.WriteLine("Injecting script...");
                // Здесь будет реальный код инжекта
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Injection completed successfully!");
                Console.ResetColor();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Injection failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static void QuickInject()
        {
            try
            {
                Console.WriteLine("Quick injection mode");
                Console.WriteLine("Searching for Roblox processes...");
                
                int injectedCount = 0;
                foreach (Process process in Process.GetProcesses())
                {
                    try
                    {
                        if (process.ProcessName.ToLower().Contains("roblox"))
                        {
                            Console.WriteLine($"Found Roblox process: PID {process.Id}");
                            injectedCount++;
                        }
                    }
                    catch { }
                }
                
                if (injectedCount > 0)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine($"Successfully injected into {injectedCount} processes");
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("No Roblox processes found for injection");
                }
                Console.ResetColor();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Quick injection failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static void ShowSettings()
        {
            Console.WriteLine("\nSettings:");
            Console.WriteLine($"Current version: {currentVersion}");
            Console.WriteLine($"Update URL: {versionUrl}");
            Console.WriteLine($"Temp path: {tempUpdateExe}");
            Console.WriteLine("Press any key to return...");
            Console.ReadKey();
        }

        static void SilentMode(string[] args)
        {
            Console.WriteLine("Silent mode activated");
            Console.WriteLine("Use interactive mode for full functionality");
        }
    }
}
