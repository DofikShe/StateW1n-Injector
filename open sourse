using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StateW1nInjector
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll")]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        const uint PROCESS_ALL_ACCESS = 0x1F0FFF;
        const uint MEM_COMMIT = 0x1000;
        const uint MEM_RESERVE = 0x2000;
        const uint PAGE_READWRITE = 0x04;

        // Настройки авто-обновления из указанного репозитория
        static string currentVersion = "1.3.0";
        static string githubRepo = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/";
        static string versionUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/version.txt";
        static string exeUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/StateW1n.exe";
        static string luaScriptsUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/scripts/";
        static string tempUpdateExe = Path.GetTempPath() + "StateW1n_new.exe";
        static string tempUpdaterScript = Path.GetTempPath() + "StateW1n_update.bat";
        static string currentExePath = Process.GetCurrentProcess().MainModule.FileName;
        static string currentDir = Path.GetDirectoryName(currentExePath);

        static WebClient webClient = new WebClient();

        [STAThread]
        static void Main(string[] args)
        {
            Console.Title = $"StateW1n Injector v{currentVersion}";
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.WriteLine($"╔══════════════════════════════════╗");
            Console.WriteLine($"║         StateW1n Injector        ║");
            Console.WriteLine($"║           Version {currentVersion}           ║");
            Console.WriteLine($"╚══════════════════════════════════╝");
            Console.ResetColor();

            // Обработка аргументов
            if (args.Length > 0 && args[0] == "--cleanup")
            {
                CleanupOldVersion();
                return;
            }

            if (args.Length > 0 && args[0] == "--updated")
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("✅ Successfully updated to latest version!");
                Console.ResetColor();
            }

            try
            {
                // Проверка обновлений в фоне
                Task.Run(() => CheckForUpdatesAsync());

                // Основной функционал
                if (args.Length > 0 && args[0] == "--silent")
                {
                    SilentMode(args);
                }
                else
                {
                    InteractiveMode();
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Error: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("Press any key to exit...");
                Console.ReadKey();
            }
        }

        static async Task CheckForUpdatesAsync()
        {
            try
            {
                await Task.Delay(2000); // Задержка для показа интерфейса
                
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("🔍 Checking for updates from GitHub...");
                Console.ResetColor();
                
                webClient.Headers.Add("User-Agent", "StateW1n-Updater/1.0");
                string latestVersion = await webClient.DownloadStringTaskAsync(versionUrl);
                latestVersion = latestVersion.Trim();

                if (IsNewerVersion(latestVersion, currentVersion))
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine($"🔄 New version available: {latestVersion}");
                    Console.WriteLine($"📥 Repository: {githubRepo}");
                    Console.ResetColor();
                    
                    Console.Write("Update now? (y/n): ");
                    var key = Console.ReadKey();
                    
                    if (key.KeyChar == 'y' || key.KeyChar == 'Y')
                    {
                        await PerformUpdate();
                    }
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("✅ You have the latest StateW1n version!");
                    Console.ResetColor();
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine($"⚠️  Update check failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static async Task PerformUpdate()
        {
            try
            {
                Console.WriteLine("\n📥 Downloading StateW1n update...");
                Console.WriteLine($"🔗 Source: {exeUrl}");
                
                // Скачиваем новую версию
                await webClient.DownloadFileTaskAsync(exeUrl, tempUpdateExe);
                
                if (!File.Exists(tempUpdateExe))
                    throw new Exception("Downloaded file not found");

                Console.WriteLine("📝 Creating update script...");
                
                // Создаем BAT скрипт для обновления
                string batScript = $@"
@echo off
chcp 65001 >nul
title StateW1n Updater
echo StateW1n Injector Update
echo ========================
echo Waiting for current process to close...
timeout /t 3 /nobreak >nul

:: Закрываем текущий процесс
taskkill /f /im ""{Path.GetFileName(currentExePath)}"" >nul 2>&1
timeout /t 2 /nobreak >nul

:: Заменяем файл
echo Updating executable...
move /y ""{tempUpdateExe}"" ""{currentExePath}"" >nul 2>&1

if exist ""{currentExePath}"" (
    echo Update successful!
    echo Starting StateW1n Injector...
    start """" ""{currentExePath}"" --updated
) else (
    echo Update failed!
    pause
)

:: Удаляем скрипт
del ""%~f0"" >nul 2>&1
";
                
                File.WriteAllText(tempUpdaterScript, batScript);
                
                Console.WriteLine("🚀 Restarting StateW1n Injector...");
                
                // Запускаем скрипт обновления
                Process.Start(new ProcessStartInfo
                {
                    FileName = tempUpdaterScript,
                    WindowStyle = ProcessWindowStyle.Normal
                });
                
                Environment.Exit(0);
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"❌ Update failed: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("Please download manually from:");
                Console.WriteLine(githubRepo);
            }
        }

        static void CleanupOldVersion()
        {
            try
            {
                string oldExe = Path.Combine(currentDir, "StateW1n_old.exe");
                if (File.Exists(oldExe))
                {
                    File.Delete(oldExe);
                    Console.WriteLine("✅ Cleaned up old version");
                }
                
                if (File.Exists(tempUpdaterScript))
                {
                    File.Delete(tempUpdaterScript);
                }
            }
            catch { }
        }

        static bool IsNewerVersion(string latest, string current)
        {
            try
            {
                Version latestVer = new Version(latest);
                Version currentVer = new Version(current);
                return latestVer > currentVer;
            }
            catch
            {
                return false;
            }
        }

        static void InteractiveMode()
        {
            while (true)
            {
                Console.WriteLine("\n" + new string('═', 40));
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.WriteLine("           STATEW1N MENU");
                Console.ResetColor();
                Console.WriteLine(new string('═', 40));
                Console.WriteLine("1. 📋 List Roblox processes");
                Console.WriteLine("2. 🎯 Inject Lua script");
                Console.WriteLine("3. 🌐 Load script from GitHub");
                Console.WriteLine("4. ⚡ Quick inject (speed)");
                Console.WriteLine("5. 🔧 Advanced options");
                Console.WriteLine("6. 🔄 Check for updates");
                Console.WriteLine("7. ❌ Exit");
                Console.Write("\nSelect option: ");

                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        ListRobloxProcesses();
                        break;
                    case "2":
                        InjectManualScript();
                        break;
                    case "3":
                        LoadScriptFromGitHub().Wait();
                        break;
                    case "4":
                        QuickInject();
                        break;
                    case "5":
                        ShowAdvancedOptions();
                        break;
                    case "6":
                        CheckForUpdatesAsync().Wait();
                        break;
                    case "7":
                        return;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid option!");
                        Console.ResetColor();
                        break;
                }
            }
        }

        static void ListRobloxProcesses()
        {
            Console.WriteLine("\n🔍 Searching for Roblox processes...");
            bool found = false;

            foreach (Process process in Process.GetProcesses())
            {
                try
                {
                    string name = process.ProcessName.ToLower();
                    if (name.Contains("roblox") || name.Contains("windows10universal"))
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($"🎯 PID: {process.Id} | Name: {process.ProcessName} | Title: {process.MainWindowTitle}");
                        found = true;
                    }
                }
                catch { }
            }

            if (!found)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("❌ No Roblox processes found!");
            }
            Console.ResetColor();
        }

        static void InjectManualScript()
        {
            try
            {
                Console.Write("Enter target PID: ");
                int pid = int.Parse(Console.ReadLine());

                Console.WriteLine("Enter Lua script (end with empty line):");
                StringBuilder script = new StringBuilder();
                string line;

                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    script.AppendLine(line);
                }

                Console.WriteLine("🚀 Injecting script...");
                // Здесь будет код инжекта
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("✅ Script injected successfully!");
                Console.ResetColor();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"❌ Injection failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static async Task LoadScriptFromGitHub()
        {
            try
            {
                Console.WriteLine("🌐 Available scripts from GitHub:");
                Console.WriteLine("1. Speed hack");
                Console.WriteLine("2. Fly script");
                Console.WriteLine("3. ESP script");
                Console.WriteLine("4. Custom URL");
                Console.Write("Select: ");

                string choice = Console.ReadLine();
                string scriptUrl = "";

                switch (choice)
                {
                    case "1":
                        scriptUrl = luaScriptsUrl + "speed.lua";
                        break;
                    case "2":
                        scriptUrl = luaScriptsUrl + "fly.lua";
                        break;
                    case "3":
                        scriptUrl = luaScriptsUrl + "esp.lua";
                        break;
                    case "4":
                        Console.Write("Enter GitHub RAW URL: ");
                        scriptUrl = Console.ReadLine();
                        break;
                    default:
                        Console.WriteLine("Invalid choice!");
                        return;
                }

                Console.WriteLine($"📥 Downloading from: {scriptUrl}");
                string luaCode = await webClient.DownloadStringTaskAsync(scriptUrl);
                
                Console.Write("Enter target PID: ");
                int pid = int.Parse(Console.ReadLine());

                Console.WriteLine("🚀 Injecting downloaded script...");
                // Код инжекта
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("✅ GitHub script injected successfully!");
                Console.ResetColor();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"❌ Failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static void QuickInject()
        {
            try
            {
                Console.WriteLine("⚡ Quick Inject - Speed Hack");
                // Автоматический поиск и инжект
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("✅ Speed hack injected to all Roblox processes!");
                Console.ResetColor();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"❌ Quick inject failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static void ShowAdvancedOptions()
        {
            Console.WriteLine("\n🔧 Advanced Options:");
            Console.WriteLine("1. Stealth mode");
            Console.WriteLine("2. Bypass anti-cheat");
            Console.WriteLine("3. Custom injection method");
            Console.WriteLine("4. Back to main menu");
            Console.Write("Select: ");

            // Заглушка для продвинутых опций
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Advanced features coming soon...");
            Console.ResetColor();
        }

        static void SilentMode(string[] args)
        {
            // Режим для автоматического использования
            Console.WriteLine("Silent mode activated");
            // Автоматический инжект по PID и скрипту
        }
    }
}
