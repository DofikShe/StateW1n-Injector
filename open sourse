using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Windows.Forms;

namespace AutoUpdateInjector
{
    class Program
    {
        static string currentVersion = "1.0";
        static string githubRawUrl = "https://raw.githubusercontent.com/yourusername/roblox-injector/main/injector.exe";
        static string versionUrl = "https://raw.githubusercontent.com/yourusername/roblox-injector/main/version.txt";
        static string tempUpdatePath = Path.GetTempPath() + "injector_update.exe";

        static void Main(string[] args)
        {
            Console.Title = "Auto-Update Roblox Injector";
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                CheckForUpdates();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                RunMainProgram();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Error: {ex.Message}");
                Console.ResetColor();
                Console.ReadKey();
            }
        }

        static void CheckForUpdates()
        {
            Console.WriteLine("üîç Checking for updates...");
            
            try
            {
                using (WebClient client = new WebClient())
                {
                    client.Headers.Add("User-Agent", "AutoUpdater");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ GitHub
                    string latestVersion = client.DownloadString(versionUrl).Trim();
                    
                    Console.WriteLine($"Current version: {currentVersion}");
                    Console.WriteLine($"Latest version: {latestVersion}");
                    
                    if (latestVersion != currentVersion)
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.WriteLine("üîÑ Update available! Downloading...");
                        Console.ResetColor();
                        
                        // –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                        client.DownloadFile(githubRawUrl, tempUpdatePath);
                        
                        Console.WriteLine("‚úÖ Update downloaded!");
                        Console.WriteLine("üîÑ Restarting with new version...");
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                        Process.Start(tempUpdatePath, "--updated");
                        
                        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
                        if (File.Exists("old_version.exe"))
                            File.Delete("old_version.exe");
                            
                        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        string currentExe = Process.GetCurrentProcess().MainModule.FileName;
                        File.Move(currentExe, "old_version.exe");
                        
                        Environment.Exit(0);
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine("‚úÖ You have the latest version!");
                        Console.ResetColor();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå Update check failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static void RunMainProgram()
        {
            Console.WriteLine("\nüéÆ Starting Roblox Injector...");
            
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace RobloxLuaInjectorConsole
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll")]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetModuleHandle(string lpModuleName);

        const uint PROCESS_ALL_ACCESS = 0x1F0FFF;
        const uint MEM_COMMIT = 0x1000;
        const uint MEM_RESERVE = 0x2000;
        const uint PAGE_READWRITE = 0x04;

        static void Main(string[] args)
        {
            Console.Title = "Roblox Lua Injector Console v1.0";
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("=== Roblox Lua Injector ===");
            Console.ResetColor();

            try
            {
                if (args.Length > 0)
                {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    AutoInjectMode(args);
                }
                else
                {
                    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                    InteractiveMode();
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Error: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("Press any key to exit...");
                Console.ReadKey();
            }
        }

        static void InteractiveMode()
        {
            while (true)
            {
                Console.WriteLine("\n1. List Roblox processes");
                Console.WriteLine("2. Inject Lua script");
                Console.WriteLine("3. Load script from file");
                Console.WriteLine("4. Exit");
                Console.Write("Select option: ");

                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        ListRobloxProcesses();
                        break;
                    case "2":
                        InjectManual();
                        break;
                    case "3":
                        InjectFromFile();
                        break;
                    case "4":
                        return;
                    default:
                        Console.WriteLine("Invalid option!");
                        break;
                }
            }
        }

        static void AutoInjectMode(string[] args)
        {
            if (args.Length < 2)
            {
                Console.WriteLine("Usage: Injector.exe <PID> <script.lua>");
                return;
            }

            int pid = int.Parse(args[0]);
            string scriptFile = args[1];
            string luaScript = File.ReadAllText(scriptFile);

            InjectToProcess(pid, luaScript);
        }

        static void ListRobloxProcesses()
        {
            Console.WriteLine("\nSearching for Roblox processes...");
            Process[] processes = Process.GetProcesses();
            bool found = false;

            foreach (Process process in processes)
            {
                try
                {
                    if (process.ProcessName.ToLower().Contains("roblox") || 
                        process.ProcessName.ToLower().Contains("windows10universal"))
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($"PID: {process.Id} | Name: {process.ProcessName} | Title: {process.MainWindowTitle}");
                        found = true;
                    }
                }
                catch { }
            }

            if (!found)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("No Roblox processes found!");
            }
            Console.ResetColor();
        }

        static void InjectManual()
        {
            Console.Write("Enter target PID: ");
            int pid = int.Parse(Console.ReadLine());

            Console.WriteLine("Enter Lua script (end with empty line):");
            StringBuilder scriptBuilder = new StringBuilder();
            string line;

            while (!string.IsNullOrEmpty(line = Console.ReadLine()))
            {
                scriptBuilder.AppendLine(line);
            }

            InjectToProcess(pid, scriptBuilder.ToString());
        }

        static void InjectFromFile()
        {
            Console.Write("Enter target PID: ");
            int pid = int.Parse(Console.ReadLine());

            Console.Write("Enter script file path: ");
            string filePath = Console.ReadLine();

            if (!File.Exists(filePath))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("File not found!");
                Console.ResetColor();
                return;
            }

            string luaScript = File.ReadAllText(filePath);
            InjectToProcess(pid, luaScript);
        }

        static void InjectToProcess(int pid, string luaScript)
        {
            Console.WriteLine($"\nAttempting injection to PID: {pid}");

            try
            {
                Process targetProcess = Process.GetProcessById(pid);
                Console.WriteLine($"Target process: {targetProcess.ProcessName}");

                // –°–æ–∑–¥–∞–µ–º –∏–Ω–∂–µ–∫—Ç–æ—Ä DLL
                byte[] dllBytes = CreateLuaInjectorDLL(luaScript);
                
                Console.WriteLine("Opening process...");
                IntPtr processHandle = OpenProcess(PROCESS_ALL_ACCESS, false, pid);
                
                if (processHandle == IntPtr.Zero)
                    throw new Exception("Cannot open process. Run as administrator?");

                Console.WriteLine("Allocating memory...");
                IntPtr allocatedMemory = VirtualAllocEx(processHandle, IntPtr.Zero, (uint)dllBytes.Length, 
                    MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

                if (allocatedMemory == IntPtr.Zero)
                    throw new Exception("Memory allocation failed");

                Console.WriteLine("Writing DLL code...");
                bool writeSuccess = WriteProcessMemory(processHandle, allocatedMemory, dllBytes, 
                    (uint)dllBytes.Length, out UIntPtr bytesWritten);

                if (!writeSuccess)
                    throw new Exception("Failed to write to process memory");

                Console.WriteLine("Creating remote thread...");
                IntPtr loadLibraryAddr = GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA");
                IntPtr threadHandle = CreateRemoteThread(processHandle, IntPtr.Zero, 0, loadLibraryAddr, 
                    allocatedMemory, 0, IntPtr.Zero);

                if (threadHandle == IntPtr.Zero)
                    throw new Exception("Failed to create remote thread");

                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("‚úÖ Injection successful! Lua script executed.");
                Console.ResetColor();

                // –ü—Ä–∏–º–µ—Ä—ã Lua —Å–∫—Ä–∏–ø—Ç–æ–≤
                ShowExampleScripts();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå Injection failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static byte[] CreateLuaInjectorDLL(string luaScript)
        {
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é DLL –¥–ª—è –∏–Ω–∂–µ–∫—Ç–∞ Lua
            string dllCode = $@"
// Lua Injector DLL for Roblox
// Auto-generated by injector

#include <Windows.h>
#include <string>

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Lua —Å—Ç—Ä–æ–∫–∞
const char* LUA_SCRIPT = ""{EscapeLuaScript(luaScript)}"";

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{{
    if (fdwReason == DLL_PROCESS_ATTACH)
    {{
        // –ò–Ω–∂–µ–∫—Ç Lua –∫–æ–¥–∞ –≤ Roblox
        ExecuteLuaInRoblox();
    }}
    return TRUE;
}}

void ExecuteLuaInRoblox()
{{
    // –ú–µ—Ç–æ–¥—ã –∏–Ω–∂–µ–∫—Ç–∞ Lua –≤ Roblox:
    // 1. –ß–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Lua
    // 2. –ß–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    // 3. –ß–µ—Ä–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–∞–º—è—Ç–∏
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Lua —Å–∫—Ä–∏–ø—Ç–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
}}
";

            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—è C++ –∫–æ–¥–∞ –≤ DLL
            // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã –∑–∞–≥–ª—É—à–∫–∏
            return Encoding.UTF8.GetBytes(dllCode);
        }

        static string EscapeLuaScript(string script)
        {
            return script.Replace("\\", "\\\\")
                        .Replace("\"", "\\\"")
                        .Replace("\n", "\\n")
                        .Replace("\r", "\\r")
                        .Replace("\t", "\\t");
        }

        static void ShowExampleScripts()
        {
            Console.WriteLine("\nExample Lua scripts for Roblox:");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine(@"
-- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100

-- –ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ
game.Players.LocalPlayer.Character.Humanoid.Health = math.huge

// Noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)

-- –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –∏–≥—Ä–æ–∫—É
local target = game.Players:FindFirstChild('PlayerName')
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
");
            Console.ResetColor();
        }
    }
}
}
