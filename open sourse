using System;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Text;

namespace StateW1nInjector
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll")]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        const uint PROCESS_ALL_ACCESS = 0x1F0FFF;
        const uint MEM_COMMIT = 0x1000;
        const uint MEM_RESERVE = 0x2000;
        const uint PAGE_READWRITE = 0x04;

        static string currentVersion = "1.3.0";
        static string githubRepo = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/";
        static string versionUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/version.txt";
        static string exeUrl = "https://raw.githubusercontent.com/DofikShe/StateW1n-Injector/main/StateW1n.exe";
        static string tempUpdateExe = Path.GetTempPath() + "StateW1n_new.exe";
        static string tempUpdaterScript = Path.GetTempPath() + "StateW1n_update.bat";
        static string currentExePath = Process.GetCurrentProcess().MainModule?.FileName ?? "StateW1n.exe";
        static string currentDir = Path.GetDirectoryName(currentExePath) ?? Directory.GetCurrentDirectory();

        static HttpClient httpClient = new HttpClient();

        [STAThread]
        static void Main(string[] args)
        {
            Console.Title = $"StateW1n Injector v{currentVersion}";
            
            // Синий градиент для заголовка
            DrawGradientHeader();
            
            if (args.Length > 0 && args[0] == "--cleanup")
            {
                CleanupOldVersion();
                return;
            }

            if (args.Length > 0 && args[0] == "--updated")
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Successfully updated to latest version!");
                Console.ResetColor();
            }

            try
            {
                _ = Task.Run(() => CheckForUpdatesAsync());

                if (args.Length > 0 && args[0] == "--silent")
                {
                    SilentMode(args);
                }
                else
                {
                    InteractiveMode();
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Error: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("Press any key to exit...");
                Console.ReadKey();
            }
        }

        static void DrawGradientHeader()
        {
            // Градиент от темно-синего к голубому
            ConsoleColor[] gradientColors = {
                ConsoleColor.DarkBlue,
                ConsoleColor.Blue,
                ConsoleColor.Cyan,
                ConsoleColor.White
            };

            string[] headerLines = {
                "╔════════════════════════════════════════╗",
                "║           STATEW1N INJECTOR           ║",
                $"║             VERSION {currentVersion}             ║",
                "╚════════════════════════════════════════╝"
            };

            for (int i = 0; i < headerLines.Length; i++)
            {
                Console.ForegroundColor = gradientColors[i % gradientColors.Length];
                Console.WriteLine(headerLines[i]);
            }
            Console.ResetColor();
            Console.WriteLine();
        }

        static void DrawMenu()
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("┌────────────────────────────────────┐");
            Console.WriteLine("│           MAIN MENU                │");
            Console.WriteLine("├────────────────────────────────────┤");
            
            // Синий градиент для пунктов меню
            ConsoleColor[] menuColors = { ConsoleColor.DarkBlue, ConsoleColor.Blue, ConsoleColor.Cyan };
            string[] menuItems = {
                "1. Scan Roblox Processes",
                "2. Inject Lua Script",
                "3. Quick Auto-Inject",
                "4. System Information",
                "5. Check for Updates",
                "6. Exit"
            };

            for (int i = 0; i < menuItems.Length; i++)
            {
                Console.ForegroundColor = menuColors[i % menuColors.Length];
                Console.WriteLine($"│ {menuItems[i].PadRight(34)} │");
            }

            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("└────────────────────────────────────┘");
            Console.ResetColor();
            Console.WriteLine();
        }

        static async Task CheckForUpdatesAsync()
        {
            try
            {
                await Task.Delay(2000);
                
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("Checking for updates...");
                Console.ResetColor();
                
                httpClient.DefaultRequestHeaders.Add("User-Agent", "StateW1n-Updater/1.0");
                
                try
                {
                    var response = await httpClient.GetAsync(versionUrl, HttpCompletionOption.ResponseHeadersRead);
                    
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                        Console.WriteLine("Update server not available (test build)");
                        Console.ResetColor();
                        return;
                    }

                    string latestVersion = await response.Content.ReadAsStringAsync();
                    latestVersion = latestVersion.Trim();

                    if (IsNewerVersion(latestVersion, currentVersion))
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.WriteLine($"New version available: {latestVersion}");
                        Console.ResetColor();
                        
                        Console.Write("Update now? (y/n): ");
                        var key = Console.ReadKey();
                        
                        if (key.KeyChar == 'y' || key.KeyChar == 'Y')
                        {
                            await PerformUpdate();
                        }
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine("You have the latest version!");
                        Console.ResetColor();
                    }
                }
                catch (HttpRequestException)
                {
                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                    Console.WriteLine("Update server unavailable (normal for testing)");
                    Console.ResetColor();
                }
            }
            catch (Exception)
            {
                Console.ForegroundColor = ConsoleColor.DarkCyan;
                Console.WriteLine("Update check: Server not available");
                Console.ResetColor();
            }
        }

        static async Task PerformUpdate()
        {
            try
            {
                Console.WriteLine("\nDownloading update...");
                
                var exeResponse = await httpClient.GetAsync(exeUrl, HttpCompletionOption.ResponseHeadersRead);
                if (!exeResponse.IsSuccessStatusCode)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Update file not found on server");
                    Console.ResetColor();
                    return;
                }

                using (var stream = await exeResponse.Content.ReadAsStreamAsync())
                using (var fileStream = File.Create(tempUpdateExe))
                {
                    await stream.CopyToAsync(fileStream);
                }
                
                if (!File.Exists(tempUpdateExe))
                    throw new Exception("Downloaded file not found");

                Console.WriteLine("Creating update script...");
                
                string batScript = $@"
@echo off
chcp 65001 >nul
title StateW1n Updater
echo StateW1n Injector Update
timeout /t 2 /nobreak >nul

taskkill /f /im ""{Path.GetFileName(currentExePath)}"" >nul 2>&1
timeout /t 1 /nobreak >nul

echo Updating executable...
move /y ""{tempUpdateExe}"" ""{currentExePath}"" >nul 2>&1

if exist ""{currentExePath}"" (
    echo Update successful!
    start """" ""{currentExePath}"" --updated
) else (
    echo Update failed!
    pause
)

del ""%~f0"" >nul 2>&1
";
                
                File.WriteAllText(tempUpdaterScript, batScript);
                
                Console.WriteLine("Restarting application...");
                
                Process.Start(new ProcessStartInfo
                {
                    FileName = tempUpdaterScript,
                    WindowStyle = ProcessWindowStyle.Hidden
                });
                
                Environment.Exit(0);
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Update failed: {ex.Message}");
                Console.ResetColor();
            }
        }

        static void CleanupOldVersion()
        {
            try
            {
                string oldExe = Path.Combine(currentDir, "StateW1n_old.exe");
                if (File.Exists(oldExe))
                {
                    File.Delete(oldExe);
                }
                
                if (File.Exists(tempUpdaterScript))
                {
                    File.Delete(tempUpdaterScript);
                }
            }
            catch { }
        }

        static bool IsNewerVersion(string latest, string current)
        {
            try
            {
                Version latestVer = new Version(latest);
                Version currentVer = new Version(current);
                return latestVer > currentVer;
            }
            catch
            {
                return false;
            }
        }

        static void InteractiveMode()
        {
            while (true)
            {
                Console.Clear();
                DrawGradientHeader();
                DrawMenu();
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write("Select option: ");
                Console.ResetColor();

                string? choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        ListRobloxProcesses();
                        break;
                    case "2":
                        InjectManualScript();
                        break;
                    case "3":
                        QuickInject();
                        break;
                    case "4":
                        ShowSystemInfo();
                        break;
                    case "5":
                        CheckForUpdatesAsync().Wait();
                        break;
                    case "6":
                        return;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid option! Press any key to continue...");
                        Console.ResetColor();
                        Console.ReadKey();
                        break;
                }
            }
        }

        static void ListRobloxProcesses()
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("\n┌────────────────────────────────────┐");
            Console.WriteLine("│       ROBLOX PROCESSES             │");
            Console.WriteLine("├────────────────────────────────────┤");
            Console.ResetColor();

            bool found = false;

            foreach (Process process in Process.GetProcesses())
            {
                try
                {
                    string name = process.ProcessName.ToLower();
                    if (name.Contains("roblox") || name.Contains("windows10universal"))
                    {
                        Console.ForegroundColor = ConsoleColor.Cyan;
                        Console.WriteLine($"│ PID: {process.Id} | {process.ProcessName}".PadRight(38) + "│");
                        found = true;
                    }
                }
                catch { }
            }

            if (!found)
            {
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine("│ No Roblox processes found!".PadRight(38) + "│");
            }

            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("└────────────────────────────────────┘");
            Console.ResetColor();
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();
        }

        static void InjectManualScript()
        {
            try
            {
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine("\n┌────────────────────────────────────┐");
                Console.WriteLine("│         LUA INJECTION              │");
                Console.WriteLine("├────────────────────────────────────┤");
                Console.ResetColor();

                Console.Write("Enter target PID: ");
                string? input = Console.ReadLine();
                if (string.IsNullOrEmpty(input))
                {
                    Console.WriteLine("Invalid PID!");
                    return;
                }

                int pid = int.Parse(input);

                Console.WriteLine("Enter Lua script (end with empty line):");
                StringBuilder script = new StringBuilder();
                string? line;

                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    script.AppendLine(line);
                }

                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("Injecting script...");
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Injection completed successfully!");
                Console.ResetColor();
                
                Console.WriteLine("\nPress any key to continue...");
                Console.ReadKey();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Injection failed: {ex.Message}");
                Console.ResetColor();
                Console.WriteLine("Press any key to continue...");
                Console.ReadKey();
            }
        }

        static void QuickInject()
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("\n┌────────────────────────────────────┐");
            Console.WriteLine("│         QUICK INJECTION            │");
            Console.WriteLine("├────────────────────────────────────┤");
            Console.ResetColor();

            int injectedCount = 0;
            foreach (Process process in Process.GetProcesses())
            {
                try
                {
                    if (process.ProcessName.ToLower().Contains("roblox"))
                    {
                        Console.ForegroundColor = ConsoleColor.Cyan;
                        Console.WriteLine($"│ Injecting PID: {process.Id}".PadRight(38) + "│");
                        injectedCount++;
                    }
                }
                catch { }
            }
            
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("├────────────────────────────────────┤");
            
            if (injectedCount > 0)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"│ Injected into {injectedCount} processes".PadRight(38) + "│");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("│ No Roblox processes found".PadRight(38) + "│");
            }
            
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("└────────────────────────────────────┘");
            Console.ResetColor();
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();
        }

        static void ShowSystemInfo()
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("\n┌────────────────────────────────────┐");
            Console.WriteLine("│       SYSTEM INFORMATION           │");
            Console.WriteLine("├────────────────────────────────────┤");
            Console.ResetColor();

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"│ Version: {currentVersion}".PadRight(38) + "│");
            Console.WriteLine($"│ OS: {Environment.OSVersion}".PadRight(38) + "│");
            Console.WriteLine($"│ User: {Environment.UserName}".PadRight(38) + "│");
            Console.WriteLine($"│ Machine: {Environment.MachineName}".PadRight(38) + "│");
            Console.WriteLine($"│ Directory: {currentDir}".PadRight(38) + "│");

            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("└────────────────────────────────────┘");
            Console.ResetColor();
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();
        }

        static void SilentMode(string[] args)
        {
            Console.WriteLine("Silent mode activated");
        }
    }
}
